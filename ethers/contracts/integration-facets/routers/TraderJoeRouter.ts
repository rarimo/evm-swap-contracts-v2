/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface TraderJoeRouterInterface extends utils.Interface {
  functions: {
    "OWNABLE_DIAMOND_STORAGE_SLOT()": FunctionFragment;
    "TRADER_JOE_ROUTER_STORAGE_SLOT()": FunctionFragment;
    "getTraderJoeRouter()": FunctionFragment;
    "owner()": FunctionFragment;
    "setTraderJoeRouterAddress(address)": FunctionFragment;
    "swapAVAXForExactTokens(address,uint256,uint256,address[])": FunctionFragment;
    "swapExactAVAXForTokens(address,uint256,uint256,address[])": FunctionFragment;
    "swapExactTokensForAVAX(address,uint256,uint256,address[])": FunctionFragment;
    "swapExactTokensForTokensTJ(address,uint256,uint256,address[])": FunctionFragment;
    "swapTokensForExactAVAX(address,uint256,uint256,address[])": FunctionFragment;
    "swapTokensForExactTokensTJ(address,uint256,uint256,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "OWNABLE_DIAMOND_STORAGE_SLOT"
      | "OWNABLE_DIAMOND_STORAGE_SLOT()"
      | "TRADER_JOE_ROUTER_STORAGE_SLOT"
      | "TRADER_JOE_ROUTER_STORAGE_SLOT()"
      | "getTraderJoeRouter"
      | "getTraderJoeRouter()"
      | "owner"
      | "owner()"
      | "setTraderJoeRouterAddress"
      | "setTraderJoeRouterAddress(address)"
      | "swapAVAXForExactTokens"
      | "swapAVAXForExactTokens(address,uint256,uint256,address[])"
      | "swapExactAVAXForTokens"
      | "swapExactAVAXForTokens(address,uint256,uint256,address[])"
      | "swapExactTokensForAVAX"
      | "swapExactTokensForAVAX(address,uint256,uint256,address[])"
      | "swapExactTokensForTokensTJ"
      | "swapExactTokensForTokensTJ(address,uint256,uint256,address[])"
      | "swapTokensForExactAVAX"
      | "swapTokensForExactAVAX(address,uint256,uint256,address[])"
      | "swapTokensForExactTokensTJ"
      | "swapTokensForExactTokensTJ(address,uint256,uint256,address[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADER_JOE_ROUTER_STORAGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADER_JOE_ROUTER_STORAGE_SLOT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderJoeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderJoeRouter()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTraderJoeRouterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderJoeRouterAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAVAXForExactTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAVAXForExactTokens(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAVAXForTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAVAXForTokens(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForAVAX",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForAVAX(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensTJ",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensTJ(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactAVAX",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactAVAX(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokensTJ",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokensTJ(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADER_JOE_ROUTER_STORAGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADER_JOE_ROUTER_STORAGE_SLOT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderJoeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderJoeRouter()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTraderJoeRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderJoeRouterAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAVAXForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAVAXForExactTokens(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAVAXForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAVAXForTokens(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForAVAX(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensTJ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensTJ(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactAVAX(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokensTJ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokensTJ(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TraderJoeRouter extends BaseContract {
  contractName: "TraderJoeRouter";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraderJoeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    TRADER_JOE_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "TRADER_JOE_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTraderJoeRouter(
      overrides?: CallOverrides
    ): Promise<[string] & { traderJoeRouter_: string }>;

    "getTraderJoeRouter()"(
      overrides?: CallOverrides
    ): Promise<[string] & { traderJoeRouter_: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setTraderJoeRouterAddress(
      traderJoeRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTraderJoeRouterAddress(address)"(
      traderJoeRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAVAXForExactTokens(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapAVAXForExactTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactAVAXForTokens(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactAVAXForTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForAVAX(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactTokensForAVAX(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensTJ(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokensTJ(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactAVAX(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapTokensForExactAVAX(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokensTJ(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapTokensForExactTokensTJ(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

  "OWNABLE_DIAMOND_STORAGE_SLOT()"(overrides?: CallOverrides): Promise<string>;

  TRADER_JOE_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

  "TRADER_JOE_ROUTER_STORAGE_SLOT()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getTraderJoeRouter(overrides?: CallOverrides): Promise<string>;

  "getTraderJoeRouter()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setTraderJoeRouterAddress(
    traderJoeRouter_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTraderJoeRouterAddress(address)"(
    traderJoeRouter_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAVAXForExactTokens(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapAVAXForExactTokens(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactAVAXForTokens(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactAVAXForTokens(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForAVAX(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactTokensForAVAX(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensTJ(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokensTJ(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactAVAX(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapTokensForExactAVAX(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokensTJ(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapTokensForExactTokensTJ(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    TRADER_JOE_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

    "TRADER_JOE_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getTraderJoeRouter(overrides?: CallOverrides): Promise<string>;

    "getTraderJoeRouter()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setTraderJoeRouterAddress(
      traderJoeRouter_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTraderJoeRouterAddress(address)"(
      traderJoeRouter_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAVAXForExactTokens(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapAVAXForExactTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactAVAXForTokens(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactAVAXForTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForAVAX(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForAVAX(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokensTJ(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForTokensTJ(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactAVAX(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapTokensForExactAVAX(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactTokensTJ(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapTokensForExactTokensTJ(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TRADER_JOE_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "TRADER_JOE_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderJoeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "getTraderJoeRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTraderJoeRouterAddress(
      traderJoeRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTraderJoeRouterAddress(address)"(
      traderJoeRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAVAXForExactTokens(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapAVAXForExactTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactAVAXForTokens(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactAVAXForTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForAVAX(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactTokensForAVAX(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokensTJ(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactTokensForTokensTJ(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactAVAX(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapTokensForExactAVAX(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokensTJ(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapTokensForExactTokensTJ(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OWNABLE_DIAMOND_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRADER_JOE_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TRADER_JOE_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderJoeRouter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTraderJoeRouter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTraderJoeRouterAddress(
      traderJoeRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTraderJoeRouterAddress(address)"(
      traderJoeRouter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAVAXForExactTokens(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapAVAXForExactTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAVAXForTokens(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactAVAXForTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForAVAX(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForAVAX(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensTJ(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokensTJ(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactAVAX(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactAVAX(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokensTJ(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactTokensTJ(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
