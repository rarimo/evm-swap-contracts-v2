/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IBridgeFacade {
  export type DepositFeeERC1155ParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeERC1155ParametersStructOutput = [string] & {
    feeToken: string;
  };

  export type DepositFeeERC20ParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeERC20ParametersStructOutput = [string] & {
    feeToken: string;
  };

  export type DepositFeeERC721ParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeERC721ParametersStructOutput = [string] & {
    feeToken: string;
  };

  export type DepositFeeNativeParametersStruct = {
    feeToken: PromiseOrValue<string>;
  };

  export type DepositFeeNativeParametersStructOutput = [string] & {
    feeToken: string;
  };
}

export declare namespace IBundler {
  export type BundleStruct = {
    salt: PromiseOrValue<BytesLike>;
    bundle: PromiseOrValue<BytesLike>;
  };

  export type BundleStructOutput = [string, string] & {
    salt: string;
    bundle: string;
  };
}

export declare namespace IERC1155Handler {
  export type DepositERC1155ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC1155ParametersStructOutput = [
    string,
    BigNumber,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };
}

export declare namespace IERC20Handler {
  export type DepositERC20ParametersStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC20ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };
}

export declare namespace IERC721Handler {
  export type DepositERC721ParametersStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    isWrapped: PromiseOrValue<boolean>;
  };

  export type DepositERC721ParametersStructOutput = [
    string,
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string,
    boolean
  ] & {
    token: string;
    tokenId: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
    isWrapped: boolean;
  };
}

export declare namespace INativeHandler {
  export type DepositNativeParametersStruct = {
    amount: PromiseOrValue<BigNumberish>;
    bundle: IBundler.BundleStruct;
    network: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
  };

  export type DepositNativeParametersStructOutput = [
    BigNumber,
    IBundler.BundleStructOutput,
    string,
    string
  ] & {
    amount: BigNumber;
    bundle: IBundler.BundleStructOutput;
    network: string;
    receiver: string;
  };
}

export interface BridgeRouterInterface extends utils.Interface {
  functions: {
    "BRIDGE_ROUTER_STORAGE_SLOT()": FunctionFragment;
    "OWNABLE_DIAMOND_STORAGE_SLOT()": FunctionFragment;
    "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))": FunctionFragment;
    "bridgeNative((address),(uint256,(bytes32,bytes),string,string))": FunctionFragment;
    "getBridgeAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "setBridgeAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BRIDGE_ROUTER_STORAGE_SLOT"
      | "BRIDGE_ROUTER_STORAGE_SLOT()"
      | "OWNABLE_DIAMOND_STORAGE_SLOT"
      | "OWNABLE_DIAMOND_STORAGE_SLOT()"
      | "bridgeERC1155"
      | "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"
      | "bridgeERC20"
      | "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"
      | "bridgeERC721"
      | "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"
      | "bridgeNative"
      | "bridgeNative((address),(uint256,(bytes32,bytes),string,string))"
      | "getBridgeAddress"
      | "getBridgeAddress()"
      | "owner"
      | "owner()"
      | "setBridgeAddress"
      | "setBridgeAddress(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BRIDGE_ROUTER_STORAGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_ROUTER_STORAGE_SLOT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC1155",
    values: [
      IBridgeFacade.DepositFeeERC1155ParametersStruct,
      IERC1155Handler.DepositERC1155ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))",
    values: [
      IBridgeFacade.DepositFeeERC1155ParametersStruct,
      IERC1155Handler.DepositERC1155ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC20",
    values: [
      IBridgeFacade.DepositFeeERC20ParametersStruct,
      IERC20Handler.DepositERC20ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))",
    values: [
      IBridgeFacade.DepositFeeERC20ParametersStruct,
      IERC20Handler.DepositERC20ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC721",
    values: [
      IBridgeFacade.DepositFeeERC721ParametersStruct,
      IERC721Handler.DepositERC721ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))",
    values: [
      IBridgeFacade.DepositFeeERC721ParametersStruct,
      IERC721Handler.DepositERC721ParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeNative",
    values: [
      IBridgeFacade.DepositFeeNativeParametersStruct,
      INativeHandler.DepositNativeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeNative((address),(uint256,(bytes32,bytes),string,string))",
    values: [
      IBridgeFacade.DepositFeeNativeParametersStruct,
      INativeHandler.DepositNativeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBridgeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BRIDGE_ROUTER_STORAGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_ROUTER_STORAGE_SLOT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeNative((address),(uint256,(bytes32,bytes),string,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAddress(address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BridgeRouter extends BaseContract {
  contractName: "BridgeRouter";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BRIDGE_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    "BRIDGE_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    bridgeERC1155(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeERC20(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeERC721(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeNative(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "bridgeNative((address),(uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBridgeAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { bridge_: string }>;

    "getBridgeAddress()"(
      overrides?: CallOverrides
    ): Promise<[string] & { bridge_: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setBridgeAddress(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBridgeAddress(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BRIDGE_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

  "BRIDGE_ROUTER_STORAGE_SLOT()"(overrides?: CallOverrides): Promise<string>;

  OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

  "OWNABLE_DIAMOND_STORAGE_SLOT()"(overrides?: CallOverrides): Promise<string>;

  bridgeERC1155(
    feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
    depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
    feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
    depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeERC20(
    feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
    depositParams_: IERC20Handler.DepositERC20ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
    feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
    depositParams_: IERC20Handler.DepositERC20ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeERC721(
    feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
    depositParams_: IERC721Handler.DepositERC721ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
    feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
    depositParams_: IERC721Handler.DepositERC721ParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeNative(
    feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
    depositParams_: INativeHandler.DepositNativeParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "bridgeNative((address),(uint256,(bytes32,bytes),string,string))"(
    feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
    depositParams_: INativeHandler.DepositNativeParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBridgeAddress(overrides?: CallOverrides): Promise<string>;

  "getBridgeAddress()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setBridgeAddress(
    bridge_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBridgeAddress(address)"(
    bridge_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BRIDGE_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

    "BRIDGE_ROUTER_STORAGE_SLOT()"(overrides?: CallOverrides): Promise<string>;

    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    bridgeERC1155(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeERC20(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeERC721(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeNative(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "bridgeNative((address),(uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getBridgeAddress(overrides?: CallOverrides): Promise<string>;

    "getBridgeAddress()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setBridgeAddress(
      bridge_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBridgeAddress(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BRIDGE_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    "BRIDGE_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridgeERC1155(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeERC20(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeERC721(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeNative(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "bridgeNative((address),(uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBridgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getBridgeAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBridgeAddress(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBridgeAddress(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BRIDGE_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BRIDGE_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OWNABLE_DIAMOND_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeERC1155(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "bridgeERC1155((address),(address,uint256,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC1155ParametersStruct,
      depositParams_: IERC1155Handler.DepositERC1155ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeERC20(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "bridgeERC20((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC20ParametersStruct,
      depositParams_: IERC20Handler.DepositERC20ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeERC721(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "bridgeERC721((address),(address,uint256,(bytes32,bytes),string,string,bool))"(
      feeParams_: IBridgeFacade.DepositFeeERC721ParametersStruct,
      depositParams_: IERC721Handler.DepositERC721ParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeNative(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "bridgeNative((address),(uint256,(bytes32,bytes),string,string))"(
      feeParams_: IBridgeFacade.DepositFeeNativeParametersStruct,
      depositParams_: INativeHandler.DepositNativeParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBridgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBridgeAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBridgeAddress(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBridgeAddress(address)"(
      bridge_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
