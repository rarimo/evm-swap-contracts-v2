/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface UniswapV3RouterInterface extends utils.Interface {
  functions: {
    "OWNABLE_DIAMOND_STORAGE_SLOT()": FunctionFragment;
    "UNISWAP_V3_ROUTER_STORAGE_SLOT()": FunctionFragment;
    "exactInput(bool,address,uint256,uint256,bytes)": FunctionFragment;
    "exactOutput(bool,address,uint256,uint256,bytes)": FunctionFragment;
    "getSwapV3Router()": FunctionFragment;
    "owner()": FunctionFragment;
    "setUniswapV3RouterAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "OWNABLE_DIAMOND_STORAGE_SLOT"
      | "OWNABLE_DIAMOND_STORAGE_SLOT()"
      | "UNISWAP_V3_ROUTER_STORAGE_SLOT"
      | "UNISWAP_V3_ROUTER_STORAGE_SLOT()"
      | "exactInput"
      | "exactInput(bool,address,uint256,uint256,bytes)"
      | "exactOutput"
      | "exactOutput(bool,address,uint256,uint256,bytes)"
      | "getSwapV3Router"
      | "getSwapV3Router()"
      | "owner"
      | "owner()"
      | "setUniswapV3RouterAddress"
      | "setUniswapV3RouterAddress(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_V3_ROUTER_STORAGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_V3_ROUTER_STORAGE_SLOT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput(bool,address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutput(bool,address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapV3Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapV3Router()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUniswapV3RouterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapV3RouterAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_V3_ROUTER_STORAGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_V3_ROUTER_STORAGE_SLOT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactInput(bool,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutput(bool,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapV3Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapV3Router()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapV3RouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapV3RouterAddress(address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UniswapV3Router extends BaseContract {
  contractName: "UniswapV3Router";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV3RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    UNISWAP_V3_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "UNISWAP_V3_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    exactInput(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMinimum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exactInput(bool,address,uint256,uint256,bytes)"(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMinimum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactOutput(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMaximum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exactOutput(bool,address,uint256,uint256,bytes)"(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMaximum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSwapV3Router(
      overrides?: CallOverrides
    ): Promise<[string] & { swapV3Router_: string }>;

    "getSwapV3Router()"(
      overrides?: CallOverrides
    ): Promise<[string] & { swapV3Router_: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setUniswapV3RouterAddress(
      swapV3Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUniswapV3RouterAddress(address)"(
      swapV3Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

  "OWNABLE_DIAMOND_STORAGE_SLOT()"(overrides?: CallOverrides): Promise<string>;

  UNISWAP_V3_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

  "UNISWAP_V3_ROUTER_STORAGE_SLOT()"(
    overrides?: CallOverrides
  ): Promise<string>;

  exactInput(
    isNative_: PromiseOrValue<boolean>,
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMinimum_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exactInput(bool,address,uint256,uint256,bytes)"(
    isNative_: PromiseOrValue<boolean>,
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMinimum_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactOutput(
    isNative_: PromiseOrValue<boolean>,
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMaximum_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exactOutput(bool,address,uint256,uint256,bytes)"(
    isNative_: PromiseOrValue<boolean>,
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMaximum_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSwapV3Router(overrides?: CallOverrides): Promise<string>;

  "getSwapV3Router()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setUniswapV3RouterAddress(
    swapV3Router_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUniswapV3RouterAddress(address)"(
    swapV3Router_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    UNISWAP_V3_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

    "UNISWAP_V3_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    exactInput(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMinimum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exactInput(bool,address,uint256,uint256,bytes)"(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMinimum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    exactOutput(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMaximum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exactOutput(bool,address,uint256,uint256,bytes)"(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMaximum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getSwapV3Router(overrides?: CallOverrides): Promise<string>;

    "getSwapV3Router()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setUniswapV3RouterAddress(
      swapV3Router_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUniswapV3RouterAddress(address)"(
      swapV3Router_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UNISWAP_V3_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "UNISWAP_V3_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInput(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMinimum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exactInput(bool,address,uint256,uint256,bytes)"(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMinimum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactOutput(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMaximum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exactOutput(bool,address,uint256,uint256,bytes)"(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMaximum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSwapV3Router(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapV3Router()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUniswapV3RouterAddress(
      swapV3Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUniswapV3RouterAddress(address)"(
      swapV3Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OWNABLE_DIAMOND_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNISWAP_V3_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UNISWAP_V3_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exactInput(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMinimum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exactInput(bool,address,uint256,uint256,bytes)"(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMinimum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactOutput(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMaximum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exactOutput(bool,address,uint256,uint256,bytes)"(
      isNative_: PromiseOrValue<boolean>,
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMaximum_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSwapV3Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSwapV3Router()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUniswapV3RouterAddress(
      swapV3Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUniswapV3RouterAddress(address)"(
      swapV3Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
