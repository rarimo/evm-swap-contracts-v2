/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface UniswapV2RouterInterface extends utils.Interface {
  functions: {
    "OWNABLE_DIAMOND_STORAGE_SLOT()": FunctionFragment;
    "UNISWAP_V2_ROUTER_STORAGE_SLOT()": FunctionFragment;
    "getSwapV2Router()": FunctionFragment;
    "owner()": FunctionFragment;
    "setUniswapV2RouterAddress(address)": FunctionFragment;
    "swapETHForExactTokens(address,uint256,uint256,address[])": FunctionFragment;
    "swapExactETHForTokens(address,uint256,uint256,address[])": FunctionFragment;
    "swapExactTokensForETH(address,uint256,uint256,address[])": FunctionFragment;
    "swapExactTokensForTokensV2(address,uint256,uint256,address[])": FunctionFragment;
    "swapTokensForExactETH(address,uint256,uint256,address[])": FunctionFragment;
    "swapTokensForExactTokensV2(address,uint256,uint256,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "OWNABLE_DIAMOND_STORAGE_SLOT"
      | "OWNABLE_DIAMOND_STORAGE_SLOT()"
      | "UNISWAP_V2_ROUTER_STORAGE_SLOT"
      | "UNISWAP_V2_ROUTER_STORAGE_SLOT()"
      | "getSwapV2Router"
      | "getSwapV2Router()"
      | "owner"
      | "owner()"
      | "setUniswapV2RouterAddress"
      | "setUniswapV2RouterAddress(address)"
      | "swapETHForExactTokens"
      | "swapETHForExactTokens(address,uint256,uint256,address[])"
      | "swapExactETHForTokens"
      | "swapExactETHForTokens(address,uint256,uint256,address[])"
      | "swapExactTokensForETH"
      | "swapExactTokensForETH(address,uint256,uint256,address[])"
      | "swapExactTokensForTokensV2"
      | "swapExactTokensForTokensV2(address,uint256,uint256,address[])"
      | "swapTokensForExactETH"
      | "swapTokensForExactETH(address,uint256,uint256,address[])"
      | "swapTokensForExactTokensV2"
      | "swapTokensForExactTokensV2(address,uint256,uint256,address[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_V2_ROUTER_STORAGE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_V2_ROUTER_STORAGE_SLOT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapV2Router()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUniswapV2RouterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapV2RouterAddress(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensV2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensV2(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokensV2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokensV2(address,uint256,uint256,address[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OWNABLE_DIAMOND_STORAGE_SLOT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_V2_ROUTER_STORAGE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_V2_ROUTER_STORAGE_SLOT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapV2Router()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapV2RouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapV2RouterAddress(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensV2(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokensV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokensV2(address,uint256,uint256,address[])",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UniswapV2Router extends BaseContract {
  contractName: "UniswapV2Router";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV2RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    UNISWAP_V2_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "UNISWAP_V2_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapV2Router(
      overrides?: CallOverrides
    ): Promise<[string] & { swapV2Router_: string }>;

    "getSwapV2Router()"(
      overrides?: CallOverrides
    ): Promise<[string] & { swapV2Router_: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setUniswapV2RouterAddress(
      swapV2Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUniswapV2RouterAddress(address)"(
      swapV2Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapETHForExactTokens(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapETHForExactTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactETHForTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForETH(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactTokensForETH(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensV2(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokensV2(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactETH(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapTokensForExactETH(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokensV2(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapTokensForExactTokensV2(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

  "OWNABLE_DIAMOND_STORAGE_SLOT()"(overrides?: CallOverrides): Promise<string>;

  UNISWAP_V2_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

  "UNISWAP_V2_ROUTER_STORAGE_SLOT()"(
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapV2Router(overrides?: CallOverrides): Promise<string>;

  "getSwapV2Router()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setUniswapV2RouterAddress(
    swapV2Router_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUniswapV2RouterAddress(address)"(
    swapV2Router_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapETHForExactTokens(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapETHForExactTokens(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactETHForTokens(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForETH(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactTokensForETH(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensV2(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokensV2(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactETH(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapTokensForExactETH(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokensV2(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapTokensForExactTokensV2(address,uint256,uint256,address[])"(
    receiver_: PromiseOrValue<string>,
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    UNISWAP_V2_ROUTER_STORAGE_SLOT(overrides?: CallOverrides): Promise<string>;

    "UNISWAP_V2_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapV2Router(overrides?: CallOverrides): Promise<string>;

    "getSwapV2Router()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setUniswapV2RouterAddress(
      swapV2Router_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUniswapV2RouterAddress(address)"(
      swapV2Router_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapETHForExactTokens(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapETHForExactTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactETHForTokens(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactETHForTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForETH(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForETH(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokensV2(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapExactTokensForTokensV2(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactETH(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapTokensForExactETH(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactTokensV2(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swapTokensForExactTokensV2(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    OWNABLE_DIAMOND_STORAGE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UNISWAP_V2_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "UNISWAP_V2_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    "getSwapV2Router()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUniswapV2RouterAddress(
      swapV2Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUniswapV2RouterAddress(address)"(
      swapV2Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapETHForExactTokens(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapETHForExactTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactETHForTokens(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactETHForTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForETH(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactTokensForETH(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokensV2(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactTokensForTokensV2(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactETH(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapTokensForExactETH(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokensV2(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapTokensForExactTokensV2(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OWNABLE_DIAMOND_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "OWNABLE_DIAMOND_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNISWAP_V2_ROUTER_STORAGE_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UNISWAP_V2_ROUTER_STORAGE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSwapV2Router()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUniswapV2RouterAddress(
      swapV2Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUniswapV2RouterAddress(address)"(
      swapV2Router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapETHForExactTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactETHForTokens(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETH(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForETH(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensV2(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokensV2(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactETH(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactETH(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokensV2(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactTokensV2(address,uint256,uint256,address[])"(
      receiver_: PromiseOrValue<string>,
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
