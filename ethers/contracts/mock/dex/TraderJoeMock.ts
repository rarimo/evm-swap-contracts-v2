/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface TraderJoeMockInterface extends utils.Interface {
  functions: {
    "WRAPPED_NATIVE()": FunctionFragment;
    "_getAmountsIn(uint256,address[])": FunctionFragment;
    "_getAmountsOut(uint256,address[])": FunctionFragment;
    "enablePair(address,address)": FunctionFragment;
    "setReserve(address,uint256)": FunctionFragment;
    "swapAVAXForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactAVAXForTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WRAPPED_NATIVE"
      | "WRAPPED_NATIVE()"
      | "_getAmountsIn"
      | "_getAmountsIn(uint256,address[])"
      | "_getAmountsOut"
      | "_getAmountsOut(uint256,address[])"
      | "enablePair"
      | "enablePair(address,address)"
      | "setReserve"
      | "setReserve(address,uint256)"
      | "swapAVAXForExactTokens"
      | "swapAVAXForExactTokens(uint256,address[],address,uint256)"
      | "swapExactAVAXForTokens"
      | "swapExactAVAXForTokens(uint256,address[],address,uint256)"
      | "swapExactTokensForAVAX"
      | "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)"
      | "swapExactTokensForTokens"
      | "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"
      | "swapTokensForExactAVAX"
      | "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)"
      | "swapTokensForExactTokens"
      | "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "WRAPPED_NATIVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WRAPPED_NATIVE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getAmountsIn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAmountsIn(uint256,address[])",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAmountsOut",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAmountsOut(uint256,address[])",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enablePair(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserve(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAVAXForExactTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAVAXForExactTokens(uint256,address[],address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAVAXForTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactAVAXForTokens(uint256,address[],address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForAVAX",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactAVAX",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "WRAPPED_NATIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WRAPPED_NATIVE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAmountsIn(uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAmountsOut(uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enablePair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enablePair(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReserve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAVAXForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAVAXForExactTokens(uint256,address[],address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAVAXForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactAVAXForTokens(uint256,address[],address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TraderJoeMock extends BaseContract {
  contractName: "TraderJoeMock";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraderJoeMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WRAPPED_NATIVE(overrides?: CallOverrides): Promise<[string]>;

    "WRAPPED_NATIVE()"(overrides?: CallOverrides): Promise<[string]>;

    _getAmountsIn(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts_: BigNumber[] }>;

    "_getAmountsIn(uint256,address[])"(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts_: BigNumber[] }>;

    _getAmountsOut(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts_: BigNumber[] }>;

    "_getAmountsOut(uint256,address[])"(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts_: BigNumber[] }>;

    enablePair(
      tokenA_: PromiseOrValue<string>,
      tokenB_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "enablePair(address,address)"(
      tokenA_: PromiseOrValue<string>,
      tokenB_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReserve(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setReserve(address,uint256)"(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAVAXForExactTokens(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapAVAXForExactTokens(uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactAVAXForTokens(
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactAVAXForTokens(uint256,address[],address,uint256)"(
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForAVAX(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)"(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactAVAX(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WRAPPED_NATIVE(overrides?: CallOverrides): Promise<string>;

  "WRAPPED_NATIVE()"(overrides?: CallOverrides): Promise<string>;

  _getAmountsIn(
    amountOut_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "_getAmountsIn(uint256,address[])"(
    amountOut_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _getAmountsOut(
    amountIn_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "_getAmountsOut(uint256,address[])"(
    amountIn_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  enablePair(
    tokenA_: PromiseOrValue<string>,
    tokenB_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "enablePair(address,address)"(
    tokenA_: PromiseOrValue<string>,
    tokenB_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReserve(
    token_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setReserve(address,uint256)"(
    token_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAVAXForExactTokens(
    amountOut_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapAVAXForExactTokens(uint256,address[],address,uint256)"(
    amountOut_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactAVAXForTokens(
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactAVAXForTokens(uint256,address[],address,uint256)"(
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForAVAX(
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)"(
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
    amountIn_: PromiseOrValue<BigNumberish>,
    amountOutMin_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactAVAX(
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)"(
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
    amountOut_: PromiseOrValue<BigNumberish>,
    amountInMax_: PromiseOrValue<BigNumberish>,
    path_: PromiseOrValue<string>[],
    receiver_: PromiseOrValue<string>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WRAPPED_NATIVE(overrides?: CallOverrides): Promise<string>;

    "WRAPPED_NATIVE()"(overrides?: CallOverrides): Promise<string>;

    _getAmountsIn(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_getAmountsIn(uint256,address[])"(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _getAmountsOut(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_getAmountsOut(uint256,address[])"(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    enablePair(
      tokenA_: PromiseOrValue<string>,
      tokenB_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "enablePair(address,address)"(
      tokenA_: PromiseOrValue<string>,
      tokenB_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserve(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserve(address,uint256)"(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAVAXForExactTokens(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapAVAXForExactTokens(uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactAVAXForTokens(
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactAVAXForTokens(uint256,address[],address,uint256)"(
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForAVAX(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)"(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokens(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactAVAX(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    WRAPPED_NATIVE(overrides?: CallOverrides): Promise<BigNumber>;

    "WRAPPED_NATIVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _getAmountsIn(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_getAmountsIn(uint256,address[])"(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getAmountsOut(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_getAmountsOut(uint256,address[])"(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enablePair(
      tokenA_: PromiseOrValue<string>,
      tokenB_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "enablePair(address,address)"(
      tokenA_: PromiseOrValue<string>,
      tokenB_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReserve(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setReserve(address,uint256)"(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAVAXForExactTokens(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapAVAXForExactTokens(uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactAVAXForTokens(
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactAVAXForTokens(uint256,address[],address,uint256)"(
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForAVAX(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)"(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactAVAX(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WRAPPED_NATIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WRAPPED_NATIVE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getAmountsIn(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_getAmountsIn(uint256,address[])"(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getAmountsOut(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_getAmountsOut(uint256,address[])"(
      amountIn_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enablePair(
      tokenA_: PromiseOrValue<string>,
      tokenB_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "enablePair(address,address)"(
      tokenA_: PromiseOrValue<string>,
      tokenB_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReserve(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setReserve(address,uint256)"(
      token_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAVAXForExactTokens(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapAVAXForExactTokens(uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactAVAXForTokens(
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactAVAXForTokens(uint256,address[],address,uint256)"(
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForAVAX(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)"(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"(
      amountIn_: PromiseOrValue<BigNumberish>,
      amountOutMin_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactAVAX(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)"(
      amountOut_: PromiseOrValue<BigNumberish>,
      amountInMax_: PromiseOrValue<BigNumberish>,
      path_: PromiseOrValue<string>[],
      receiver_: PromiseOrValue<string>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
