/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SwapDiamondStorage,
  SwapDiamondStorageInterface,
} from "../../contracts/SwapDiamondStorage";

const _abi = [
  {
    inputs: [],
    name: "SWAP_DIAMOND_STORAGE_SLOT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector_",
        type: "bytes4",
      },
    ],
    name: "getSelectorType",
    outputs: [
      {
        internalType: "enum SwapDiamondStorage.SelectorType",
        name: "selectorType_",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063aaadd3771461003b578063ad5403eb14610075575b600080fd5b6100627fd9994a2d0824ef735b1d5a0b20e0f1fb2c24accd777b363dcae017c3d893ad9e81565b6040519081526020015b60405180910390f35b6100c16100833660046100ce565b6001600160e01b03191660009081527fd9994a2d0824ef735b1d5a0b20e0f1fb2c24accd777b363dcae017c3d893ad9e602052604090205460ff1690565b60405161006c91906100ff565b6000602082840312156100e057600080fd5b81356001600160e01b0319811681146100f857600080fd5b9392505050565b602081016003831061012157634e487b7160e01b600052602160045260246000fd5b9190529056fea2646970667358221220f2d6054ac0a47b8c966eb9f6216fe0c6009edd530085eff521901d764b3f67ab64736f6c63430008090033";

type SwapDiamondStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapDiamondStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapDiamondStorage__factory extends ContractFactory {
  constructor(...args: SwapDiamondStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SwapDiamondStorage";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapDiamondStorage> {
    return super.deploy(overrides || {}) as Promise<SwapDiamondStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapDiamondStorage {
    return super.attach(address) as SwapDiamondStorage;
  }
  override connect(signer: Signer): SwapDiamondStorage__factory {
    return super.connect(signer) as SwapDiamondStorage__factory;
  }
  static readonly contractName: "SwapDiamondStorage";

  public readonly contractName: "SwapDiamondStorage";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapDiamondStorageInterface {
    return new utils.Interface(_abi) as SwapDiamondStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapDiamondStorage {
    return new Contract(address, _abi, signerOrProvider) as SwapDiamondStorage;
  }
}
