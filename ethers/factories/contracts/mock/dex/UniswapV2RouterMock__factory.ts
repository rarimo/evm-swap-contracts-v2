/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  UniswapV2RouterMock,
  UniswapV2RouterMockInterface,
} from "../../../../contracts/mock/dex/UniswapV2RouterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "weth9_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WRAPPED_NATIVE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
    ],
    name: "_getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
    ],
    name: "_getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA_",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB_",
        type: "address",
      },
    ],
    name: "enablePair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "setReserve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapETHForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactETHForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForETH",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapTokensForExactETH",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type UniswapV2RouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV2RouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV2RouterMock__factory extends ContractFactory {
  constructor(...args: UniswapV2RouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UniswapV2RouterMock";
  }

  override deploy(
    weth9_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniswapV2RouterMock> {
    return super.deploy(
      weth9_,
      overrides || {}
    ) as Promise<UniswapV2RouterMock>;
  }
  override getDeployTransaction(
    weth9_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth9_, overrides || {});
  }
  override attach(address: string): UniswapV2RouterMock {
    return super.attach(address) as UniswapV2RouterMock;
  }
  override connect(signer: Signer): UniswapV2RouterMock__factory {
    return super.connect(signer) as UniswapV2RouterMock__factory;
  }
  static readonly contractName: "UniswapV2RouterMock";

  public readonly contractName: "UniswapV2RouterMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2RouterMockInterface {
    return new utils.Interface(_abi) as UniswapV2RouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2RouterMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2RouterMock;
  }
}
