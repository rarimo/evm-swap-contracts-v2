/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  AbstractSwapRouterMock,
  AbstractSwapRouterMockInterface,
} from "../../../../contracts/mock/dex/AbstractSwapRouterMock";

const _abi = [
  {
    inputs: [],
    name: "WRAPPED_NATIVE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
    ],
    name: "_getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
    ],
    name: "_getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA_",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB_",
        type: "address",
      },
    ],
    name: "enablePair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "setReserve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

export class AbstractSwapRouterMock__factory {
  static readonly abi = _abi;
  static createInterface(): AbstractSwapRouterMockInterface {
    return new utils.Interface(_abi) as AbstractSwapRouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AbstractSwapRouterMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AbstractSwapRouterMock;
  }
}
