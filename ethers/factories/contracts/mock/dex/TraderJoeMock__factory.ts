/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TraderJoeMock,
  TraderJoeMockInterface,
} from "../../../../contracts/mock/dex/TraderJoeMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "wavax_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WRAPPED_NATIVE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
    ],
    name: "_getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
    ],
    name: "_getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA_",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB_",
        type: "address",
      },
    ],
    name: "enablePair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "setReserve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapAVAXForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactAVAXForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForAVAX",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapTokensForExactAVAX",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax_",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path_",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "receiver_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type TraderJoeMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TraderJoeMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TraderJoeMock__factory extends ContractFactory {
  constructor(...args: TraderJoeMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TraderJoeMock";
  }

  override deploy(
    wavax_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TraderJoeMock> {
    return super.deploy(wavax_, overrides || {}) as Promise<TraderJoeMock>;
  }
  override getDeployTransaction(
    wavax_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(wavax_, overrides || {});
  }
  override attach(address: string): TraderJoeMock {
    return super.attach(address) as TraderJoeMock;
  }
  override connect(signer: Signer): TraderJoeMock__factory {
    return super.connect(signer) as TraderJoeMock__factory;
  }
  static readonly contractName: "TraderJoeMock";

  public readonly contractName: "TraderJoeMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TraderJoeMockInterface {
    return new utils.Interface(_abi) as TraderJoeMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TraderJoeMock {
    return new Contract(address, _abi, signerOrProvider) as TraderJoeMock;
  }
}
