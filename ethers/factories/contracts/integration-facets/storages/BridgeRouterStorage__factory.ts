/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BridgeRouterStorage,
  BridgeRouterStorageInterface,
} from "../../../../contracts/integration-facets/storages/BridgeRouterStorage";

const _abi = [
  {
    inputs: [],
    name: "BRIDGE_ROUTER_STORAGE_SLOT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBridgeAddress",
    outputs: [
      {
        internalType: "address",
        name: "bridge_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060df8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80635e080a57146037578063fb32c508146070575b600080fd5b605d7f5ea26e55d177fb0598ee321d1c2195cdda601f4ba884185dfb6dd105d53515b281565b6040519081526020015b60405180910390f35b7f5ea26e55d177fb0598ee321d1c2195cdda601f4ba884185dfb6dd105d53515b2546040516001600160a01b039091168152602001606756fea2646970667358221220991a96dee442dd6b1ebc55f81a628f91e59389cda3689a98d8a9192aa201c51e64736f6c63430008090033";

type BridgeRouterStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeRouterStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeRouterStorage__factory extends ContractFactory {
  constructor(...args: BridgeRouterStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BridgeRouterStorage";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeRouterStorage> {
    return super.deploy(overrides || {}) as Promise<BridgeRouterStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeRouterStorage {
    return super.attach(address) as BridgeRouterStorage;
  }
  override connect(signer: Signer): BridgeRouterStorage__factory {
    return super.connect(signer) as BridgeRouterStorage__factory;
  }
  static readonly contractName: "BridgeRouterStorage";

  public readonly contractName: "BridgeRouterStorage";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeRouterStorageInterface {
    return new utils.Interface(_abi) as BridgeRouterStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeRouterStorage {
    return new Contract(address, _abi, signerOrProvider) as BridgeRouterStorage;
  }
}
