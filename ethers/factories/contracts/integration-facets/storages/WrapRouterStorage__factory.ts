/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  WrapRouterStorage,
  WrapRouterStorageInterface,
} from "../../../../contracts/integration-facets/storages/WrapRouterStorage";

const _abi = [
  {
    inputs: [],
    name: "WRAP_ROUTER_STORAGE_SLOT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWrappedNativeAddress",
    outputs: [
      {
        internalType: "address",
        name: "wrappedNative_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060df8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80634e07eb5e14603757806353a877c0146076575b600080fd5b7ffe25193ad3c7220579a9b1af0cb7f7fcde33ebf0911dc1aa1edc1b43af9a163a546040516001600160a01b0390911681526020015b60405180910390f35b609c7ffe25193ad3c7220579a9b1af0cb7f7fcde33ebf0911dc1aa1edc1b43af9a163a81565b604051908152602001606d56fea2646970667358221220438f91d41bcc2623c6eb935acd50f35477dd55b630ca816d47c182eeb32c75c764736f6c63430008090033";

type WrapRouterStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WrapRouterStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WrapRouterStorage__factory extends ContractFactory {
  constructor(...args: WrapRouterStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "WrapRouterStorage";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WrapRouterStorage> {
    return super.deploy(overrides || {}) as Promise<WrapRouterStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WrapRouterStorage {
    return super.attach(address) as WrapRouterStorage;
  }
  override connect(signer: Signer): WrapRouterStorage__factory {
    return super.connect(signer) as WrapRouterStorage__factory;
  }
  static readonly contractName: "WrapRouterStorage";

  public readonly contractName: "WrapRouterStorage";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WrapRouterStorageInterface {
    return new utils.Interface(_abi) as WrapRouterStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WrapRouterStorage {
    return new Contract(address, _abi, signerOrProvider) as WrapRouterStorage;
  }
}
