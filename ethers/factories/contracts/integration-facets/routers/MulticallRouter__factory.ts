/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MulticallRouter,
  MulticallRouterInterface,
} from "../../../../contracts/integration-facets/routers/MulticallRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets_",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values_",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "data_",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106e4806100206000396000f3fe60806040526004361061001e5760003560e01c806345f67ac714610023575b600080fd5b610036610031366004610396565b610038565b005b848314801561004657508281145b6100a15760405162461bcd60e51b815260206004820152602160248201527f4d756c746963616c6c526f757465723a206c656e67746873206d69736d6174636044820152600d60fb1b60648201526084015b60405180910390fd5b60005b858110156101f7576000806100e78989858181106100c4576100c4610430565b90506020020160208101906100d9919061045e565b6001600160a01b0316610200565b6001600160a01b031661011188888681811061010557610105610430565b905060200201356102a8565b86868681811061012357610123610430565b90506020028101906101359190610482565b6040516101439291906104c9565b60006040518083038185875af1925050503d8060008114610180576040519150601f19603f3d011682016040523d82523d6000602084013e610185565b606091505b5091509150816101c56040518060400160405280600f81526020016e26bab63a34b1b0b6362937baba32b960891b8152506101bf846102bd565b90610302565b906101e35760405162461bcd60e51b81526004016100989190610509565b505050806101f09061053c565b90506100a4565b50505050505050565b60006001600160a01b0382166001141561021b575030919050565b6001600160a01b038216600214156102a457306001600160a01b03166346b3353b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561026657600080fd5b505afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610565565b92915050565b5090565b6000600160ff1b8214156102a4575047919050565b60606044825110156102e8576040518060600160405280602681526020016106896026913992915050565b6004820191508180602001905181019061029e9190610598565b6060816040518060400160405280600281526020016101d160f51b8152508460405160200161033393929190610645565b604051602081830303815290604052905092915050565b60008083601f84011261035c57600080fd5b50813567ffffffffffffffff81111561037457600080fd5b6020830191508360208260051b850101111561038f57600080fd5b9250929050565b600080600080600080606087890312156103af57600080fd5b863567ffffffffffffffff808211156103c757600080fd5b6103d38a838b0161034a565b909850965060208901359150808211156103ec57600080fd5b6103f88a838b0161034a565b9096509450604089013591508082111561041157600080fd5b5061041e89828a0161034a565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461045b57600080fd5b50565b60006020828403121561047057600080fd5b813561047b81610446565b9392505050565b6000808335601e1984360301811261049957600080fd5b83018035915067ffffffffffffffff8211156104b457600080fd5b60200191503681900382131561038f57600080fd5b8183823760009101908152919050565b60005b838110156104f45781810151838201526020016104dc565b83811115610503576000848401525b50505050565b60208152600082518060208401526105288160408501602087016104d9565b601f01601f19169190910160400192915050565b600060001982141561055e57634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561057757600080fd5b815161047b81610446565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156105aa57600080fd5b815167ffffffffffffffff808211156105c257600080fd5b818401915084601f8301126105d657600080fd5b8151818111156105e8576105e8610582565b604051601f8201601f19908116603f0116810190838211818310171561061057610610610582565b8160405282815287602084870101111561062957600080fd5b61063a8360208301602088016104d9565b979650505050505050565b600084516106578184602089016104d9565b84519083019061066b8183602089016104d9565b845191019061067e8183602088016104d9565b019594505050505056fe4572726f7248656c7065723a20636f6d6d616e642072657665727465642073696c656e746c79a2646970667358221220100481f4dfc4cbb8772169d32fca072e8ce583a1a874fb3793ff3cc50671f18c64736f6c63430008090033";

type MulticallRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MulticallRouter__factory extends ContractFactory {
  constructor(...args: MulticallRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MulticallRouter";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MulticallRouter> {
    return super.deploy(overrides || {}) as Promise<MulticallRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MulticallRouter {
    return super.attach(address) as MulticallRouter;
  }
  override connect(signer: Signer): MulticallRouter__factory {
    return super.connect(signer) as MulticallRouter__factory;
  }
  static readonly contractName: "MulticallRouter";

  public readonly contractName: "MulticallRouter";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallRouterInterface {
    return new utils.Interface(_abi) as MulticallRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MulticallRouter {
    return new Contract(address, _abi, signerOrProvider) as MulticallRouter;
  }
}
