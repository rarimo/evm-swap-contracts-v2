/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MasterRouter,
  MasterRouterInterface,
} from "../../../contracts/master-facet/MasterRouter";

const _abi = [
  {
    inputs: [],
    name: "DIAMOND_STORAGE_SLOT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MASTER_ROUTER_STORAGE_SLOT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SWAP_DIAMOND_STORAGE_SLOT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCallerAddress",
    outputs: [
      {
        internalType: "address",
        name: "caller_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector_",
        type: "bytes4",
      },
    ],
    name: "getFacetBySelector",
    outputs: [
      {
        internalType: "address",
        name: "facet_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet_",
        type: "address",
      },
    ],
    name: "getFacetSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "selectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFacets",
    outputs: [
      {
        internalType: "address[]",
        name: "facets_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector_",
        type: "bytes4",
      },
    ],
    name: "getSelectorType",
    outputs: [
      {
        internalType: "enum SwapDiamondStorage.SelectorType",
        name: "selectorType_",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "command",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "skipRevert",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MasterRouter.Payload[]",
        name: "payloads_",
        type: "tuple[]",
      },
    ],
    name: "make",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506112a0806100206000396000f3fe6080604052600436106100c25760003560e01c80638ea0b2481161007f578063bc197c8111610059578063bc197c8114610298578063e828c51f146102c4578063f23a6e61146102f8578063fe00955e1461032457600080fd5b80638ea0b2481461020a578063aaadd37714610237578063ad5403eb1461026b57600080fd5b806301ffc9a7146100c7578063150b7a02146100fc57806346b3353b14610140578063660fd3b014610191578063662ea47d146101d35780637a344c6e146101f5575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610bc8565b610344565b60405190151581526020015b60405180910390f35b34801561010857600080fd5b50610127610117366004610cce565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016100f3565b34801561014c57600080fd5b507f444ab9770a554b6ea261614928f25db0616ffe55682777211d40e847b886eb45546001600160a01b03165b6040516001600160a01b0390911681526020016100f3565b34801561019d57600080fd5b506101c57f444ab9770a554b6ea261614928f25db0616ffe55682777211d40e847b886eb4581565b6040519081526020016100f3565b3480156101df57600080fd5b506101e861037b565b6040516100f39190610d36565b610208610203366004610d83565b6103ab565b005b34801561021657600080fd5b5061022a610225366004610df8565b610493565b6040516100f39190610e13565b34801561024357600080fd5b506101c57fd9994a2d0824ef735b1d5a0b20e0f1fb2c24accd777b363dcae017c3d893ad9e81565b34801561027757600080fd5b5061028b610286366004610bc8565b610574565b6040516100f39190610e6b565b3480156102a457600080fd5b506101276102b3366004610f13565b63bc197c8160e01b95945050505050565b3480156102d057600080fd5b506101c57fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c81565b34801561030457600080fd5b50610127610313366004610fbd565b63f23a6e6160e01b95945050505050565b34801561033057600080fd5b5061017961033f366004610bc8565b6105b2565b60006001600160e01b03198216630271189760e51b148061037557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606103a67fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e6105f6565b905090565b7f444ab9770a554b6ea261614928f25db0616ffe55682777211d40e847b886eb4580546001600160a01b0316156104295760405162461bcd60e51b815260206004820152601f60248201527f4d6173746572526f7574657253746f726167653a206e65772063616c6c65720060448201526064015b60405180910390fd5b80546001600160a01b0319163317815560005b828110156104805761047084848381811061045957610459611022565b905060200281019061046b9190611038565b61060a565b61047981611058565b905061043c565b5080546001600160a01b03191690555050565b6001600160a01b03811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d602052604090206060906104d681610788565b67ffffffffffffffff8111156104ee576104ee610c09565b604051908082528060200260200182016040528015610517578160200160208202803683370190505b50915060005b825181101561056d576105308282610792565b83828151811061054257610542611022565b6001600160e01b0319909216602092830291909101909101528061056581611058565b91505061051d565b5050919050565b6001600160e01b03191660009081527fd9994a2d0824ef735b1d5a0b20e0f1fb2c24accd777b363dcae017c3d893ad9e602052604090205460ff1690565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260409020546001600160a01b031690565b606060006106038361079e565b9392505050565b600061061682356107fa565b9050600261062382610574565b600281111561063457610634610e55565b146106815760405162461bcd60e51b815260206004820152601d60248201527f4d6173746572526f757465723a20696e76616c696420636f6d6d616e640000006044820152606401610420565b60008061068d836105b2565b6001600160a01b0316836106a46040870187611081565b6040516020016106b6939291906110cf565b60408051601f19818403018152908290526106d091611123565b600060405180830381855af49150503d806000811461070b576040519150601f19603f3d011682016040523d82523d6000602084013e610710565b606091505b5091509150818061072c575061072c6040850160208601611135565b6107636040518060400160405280600c81526020016b26b0b9ba32b92937baba32b960a11b81525061075d8461087f565b906108c4565b906107815760405162461bcd60e51b81526004016104209190611157565b5050505050565b6000610375825490565b6000610603838361090c565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107ee57602002820191906000526020600020905b8154815260200190600101908083116107da575b50505050509050919050565b6000600a82101561080e5761037582610936565b60148210156108205761037582610994565b60198210156108325761037582610a37565b601e8210156108445761037582610a67565b603c8210156108565761037582610a80565b60468210156108685761037582610b0c565b605082101561087a5761037582610b3c565b919050565b60606044825110156108aa576040518060600160405280602681526020016112456026913992915050565b60048201915081806020019051810190610375919061118a565b6060816040518060400160405280600281526020016101d160f51b815250846040516020016108f593929190611201565b604051602081830303815290604052905092915050565b600082600001828154811061092357610923611022565b9060005260206000200154905092915050565b6000600182141561094f57506379ff219d60e11b919050565b60028214156109665750636ffad69560e01b919050565b600382141561097d5750634f7e12b560e01b919050565b600482141561087a57506313f535dd60e21b919050565b6000600a8214156109ad575063276d76f960e21b919050565b600b8214156109c45750634652f1cb60e11b919050565b600c8214156109db5750631cb5685960e01b919050565b600d8214156109f25750633e97486160e11b919050565b600e821415610a09575063bd31ed1f60e01b919050565b600f821415610a205750636ef8622b60e01b919050565b601082141561087a57506357e2c45f60e01b919050565b60006014821415610a505750635f9bb63d60e11b919050565b601582141561087a57506339f4769360e01b919050565b6000601982141561087a57506345f67ac760e01b919050565b60006032821415610a995750631095319f60e31b919050565b6033821415610ab0575063cbb9b3dd60e01b919050565b6034821415610ac757506304a84c1d60e01b919050565b6035821415610ade57506314bdbc8560e21b919050565b6036821415610af55750632f45a77160e01b919050565b603782141561087a5750634c2c503360e11b919050565b6000603c821415610b25575063272bf55960e01b919050565b603d82141561087a575063654833e760e01b919050565b60006046821415610b555750637348dc0560e11b919050565b6047821415610b6c5750634d8e80a760e11b919050565b6048821415610b83575063519c164760e01b919050565b6049821415610b9a5750631d1460f360e31b919050565b604a821415610bb157506334036b1f60e21b919050565b604b82141561087a575063023a012f60e41b919050565b600060208284031215610bda57600080fd5b81356001600160e01b03198116811461060357600080fd5b80356001600160a01b038116811461087a57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c4857610c48610c09565b604052919050565b600067ffffffffffffffff821115610c6a57610c6a610c09565b50601f01601f191660200190565b600082601f830112610c8957600080fd5b8135610c9c610c9782610c50565b610c1f565b818152846020838601011115610cb157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610ce457600080fd5b610ced85610bf2565b9350610cfb60208601610bf2565b925060408501359150606085013567ffffffffffffffff811115610d1e57600080fd5b610d2a87828801610c78565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015610d775783516001600160a01b031683529284019291840191600101610d52565b50909695505050505050565b60008060208385031215610d9657600080fd5b823567ffffffffffffffff80821115610dae57600080fd5b818501915085601f830112610dc257600080fd5b813581811115610dd157600080fd5b8660208260051b8501011115610de657600080fd5b60209290920196919550909350505050565b600060208284031215610e0a57600080fd5b61060382610bf2565b6020808252825182820181905260009190848201906040850190845b81811015610d775783516001600160e01b03191683529284019291840191600101610e2f565b634e487b7160e01b600052602160045260246000fd5b6020810160038310610e8d57634e487b7160e01b600052602160045260246000fd5b91905290565b600082601f830112610ea457600080fd5b8135602067ffffffffffffffff821115610ec057610ec0610c09565b8160051b610ecf828201610c1f565b9283528481018201928281019087851115610ee957600080fd5b83870192505b84831015610f0857823582529183019190830190610eef565b979650505050505050565b600080600080600060a08688031215610f2b57600080fd5b610f3486610bf2565b9450610f4260208701610bf2565b9350604086013567ffffffffffffffff80821115610f5f57600080fd5b610f6b89838a01610e93565b94506060880135915080821115610f8157600080fd5b610f8d89838a01610e93565b93506080880135915080821115610fa357600080fd5b50610fb088828901610c78565b9150509295509295909350565b600080600080600060a08688031215610fd557600080fd5b610fde86610bf2565b9450610fec60208701610bf2565b93506040860135925060608601359150608086013567ffffffffffffffff81111561101657600080fd5b610fb088828901610c78565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261104e57600080fd5b9190910192915050565b600060001982141561107a57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000808335601e1984360301811261109857600080fd5b83018035915067ffffffffffffffff8211156110b357600080fd5b6020019150368190038213156110c857600080fd5b9250929050565b6001600160e01b031984168152818360048301376000910160040190815292915050565b60005b8381101561110e5781810151838201526020016110f6565b8381111561111d576000848401525b50505050565b6000825161104e8184602087016110f3565b60006020828403121561114757600080fd5b8135801515811461060357600080fd5b60208152600082518060208401526111768160408501602087016110f3565b601f01601f19169190910160400192915050565b60006020828403121561119c57600080fd5b815167ffffffffffffffff8111156111b357600080fd5b8201601f810184136111c457600080fd5b80516111d2610c9782610c50565b8181528560208385010111156111e757600080fd5b6111f88260208301602086016110f3565b95945050505050565b600084516112138184602089016110f3565b8451908301906112278183602089016110f3565b845191019061123a8183602088016110f3565b019594505050505056fe4572726f7248656c7065723a20636f6d6d616e642072657665727465642073696c656e746c79a2646970667358221220f9e55e6d2d4be582bea660c9ab7d20fa5df417c9c9b39a3bf2f018cca11c072f64736f6c63430008090033";

type MasterRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MasterRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MasterRouter__factory extends ContractFactory {
  constructor(...args: MasterRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MasterRouter";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MasterRouter> {
    return super.deploy(overrides || {}) as Promise<MasterRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MasterRouter {
    return super.attach(address) as MasterRouter;
  }
  override connect(signer: Signer): MasterRouter__factory {
    return super.connect(signer) as MasterRouter__factory;
  }
  static readonly contractName: "MasterRouter";

  public readonly contractName: "MasterRouter";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MasterRouterInterface {
    return new utils.Interface(_abi) as MasterRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MasterRouter {
    return new Contract(address, _abi, signerOrProvider) as MasterRouter;
  }
}
