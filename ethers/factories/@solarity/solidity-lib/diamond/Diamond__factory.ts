/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Diamond,
  DiamondInterface,
} from "../../../../@solarity/solidity-lib/diamond/Diamond";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "DIAMOND_STORAGE_SLOT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector_",
        type: "bytes4",
      },
    ],
    name: "getFacetBySelector",
    outputs: [
      {
        internalType: "address",
        name: "facet_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet_",
        type: "address",
      },
    ],
    name: "getFacetSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "selectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFacets",
    outputs: [
      {
        internalType: "address[]",
        name: "facets_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061052c806100206000396000f3fe60806040526004361061003f5760003560e01c8063662ea47d146100e25780638ea0b2481461010d578063e828c51f1461013a578063fe00955e1461017c575b60006100566000356001600160e01b0319166101b4565b90506001600160a01b0381166100be5760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e643a2073656c6563746f72206973206e6f7420726567697374656044820152621c995960ea1b606482015260840160405180910390fd5b3660008037600080366000845af43d6000803e8080156100dd573d6000f35b3d6000fd5b3480156100ee57600080fd5b506100f76101f8565b60405161010491906103bf565b60405180910390f35b34801561011957600080fd5b5061012d61012836600461040c565b610228565b6040516101049190610435565b34801561014657600080fd5b5061016e7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c81565b604051908152602001610104565b34801561018857600080fd5b5061019c610197366004610477565b6101b4565b6040516001600160a01b039091168152602001610104565b6001600160e01b03191660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260409020546001600160a01b031690565b60606102237fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e610309565b905090565b6001600160a01b03811660009081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d6020526040902060609061026b8161031d565b67ffffffffffffffff811115610283576102836104a1565b6040519080825280602002602001820160405280156102ac578160200160208202803683370190505b50915060005b8251811015610302576102c5828261032d565b8382815181106102d7576102d76104b7565b6001600160e01b031990921660209283029190910190910152806102fa816104cd565b9150506102b2565b5050919050565b6060600061031683610339565b9392505050565b6000610327825490565b92915050565b60006103168383610395565b60608160000180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020905b815481526020019060010190808311610375575b50505050509050919050565b60008260000182815481106103ac576103ac6104b7565b9060005260206000200154905092915050565b6020808252825182820181905260009190848201906040850190845b818110156104005783516001600160a01b0316835292840192918401916001016103db565b50909695505050505050565b60006020828403121561041e57600080fd5b81356001600160a01b038116811461031657600080fd5b6020808252825182820181905260009190848201906040850190845b818110156104005783516001600160e01b03191683529284019291840191600101610451565b60006020828403121561048957600080fd5b81356001600160e01b03198116811461031657600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156104ef57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220ebeed198a92530dae0b646a74a3436247d859cfb939e6a9131af999bb11c968964736f6c63430008090033";

type DiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Diamond__factory extends ContractFactory {
  constructor(...args: DiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Diamond";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Diamond> {
    return super.deploy(overrides || {}) as Promise<Diamond>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Diamond {
    return super.attach(address) as Diamond;
  }
  override connect(signer: Signer): Diamond__factory {
    return super.connect(signer) as Diamond__factory;
  }
  static readonly contractName: "Diamond";

  public readonly contractName: "Diamond";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInterface {
    return new utils.Interface(_abi) as DiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Diamond {
    return new Contract(address, _abi, signerOrProvider) as Diamond;
  }
}
