/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155Supply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Supply__factory>;
    getContractFactory(
      name: "ERC1155URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155URIStorage__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "UUPSSignableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSSignableUpgradeable__factory>;
    getContractFactory(
      name: "Bundler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bundler__factory>;
    getContractFactory(
      name: "BundleExecutorImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BundleExecutorImplementation__factory>;
    getContractFactory(
      name: "BundleExecutorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BundleExecutorProxy__factory>;
    getContractFactory(
      name: "BridgeFacade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeFacade__factory>;
    getContractFactory(
      name: "FeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManager__factory>;
    getContractFactory(
      name: "ERC1155Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Handler__factory>;
    getContractFactory(
      name: "ERC20Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Handler__factory>;
    getContractFactory(
      name: "ERC721Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Handler__factory>;
    getContractFactory(
      name: "NativeHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeHandler__factory>;
    getContractFactory(
      name: "SBTHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SBTHandler__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IBundler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBundler__factory>;
    getContractFactory(
      name: "IBridgeFacade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeFacade__factory>;
    getContractFactory(
      name: "IFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeManager__factory>;
    getContractFactory(
      name: "IERC1155Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Handler__factory>;
    getContractFactory(
      name: "IERC20Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Handler__factory>;
    getContractFactory(
      name: "IERC721Handler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Handler__factory>;
    getContractFactory(
      name: "INativeHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INativeHandler__factory>;
    getContractFactory(
      name: "ISBTHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISBTHandler__factory>;
    getContractFactory(
      name: "IERC1155MintableBurnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MintableBurnable__factory>;
    getContractFactory(
      name: "IERC20MintableBurnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MintableBurnable__factory>;
    getContractFactory(
      name: "IERC721MintableBurnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MintableBurnable__factory>;
    getContractFactory(
      name: "IWrappedNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedNative__factory>;
    getContractFactory(
      name: "ISBT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISBT__factory>;
    getContractFactory(
      name: "ISigners",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISigners__factory>;
    getContractFactory(
      name: "Constants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Constants__factory>;
    getContractFactory(
      name: "ERC1155MintableBurnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155MintableBurnable__factory>;
    getContractFactory(
      name: "ERC20MintableBurnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MintableBurnable__factory>;
    getContractFactory(
      name: "ERC721MintableBurnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721MintableBurnable__factory>;
    getContractFactory(
      name: "Hashes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hashes__factory>;
    getContractFactory(
      name: "Signers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Signers__factory>;
    getContractFactory(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Diamond__factory>;
    getContractFactory(
      name: "DiamondStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondStorage__factory>;
    getContractFactory(
      name: "OwnableDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableDiamond__factory>;
    getContractFactory(
      name: "OwnableDiamondStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableDiamondStorage__factory>;
    getContractFactory(
      name: "IJoeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJoeRouter01__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IPeripheryPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeripheryPayments__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "BridgeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeRouter__factory>;
    getContractFactory(
      name: "MulticallRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulticallRouter__factory>;
    getContractFactory(
      name: "TraderJoeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TraderJoeRouter__factory>;
    getContractFactory(
      name: "TransferRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferRouter__factory>;
    getContractFactory(
      name: "UniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router__factory>;
    getContractFactory(
      name: "UniswapV3Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Router__factory>;
    getContractFactory(
      name: "WrapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapRouter__factory>;
    getContractFactory(
      name: "BridgeRouterStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeRouterStorage__factory>;
    getContractFactory(
      name: "TraderJoeRouterStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TraderJoeRouterStorage__factory>;
    getContractFactory(
      name: "UniswapV2RouterStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2RouterStorage__factory>;
    getContractFactory(
      name: "UniswapV3RouterStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3RouterStorage__factory>;
    getContractFactory(
      name: "WrapRouterStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapRouterStorage__factory>;
    getContractFactory(
      name: "IWrappedNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedNative__factory>;
    getContractFactory(
      name: "MasterRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterRouter__factory>;
    getContractFactory(
      name: "MasterRouterStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterRouterStorage__factory>;
    getContractFactory(
      name: "AbstractSwapRouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractSwapRouterMock__factory>;
    getContractFactory(
      name: "TraderJoeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TraderJoeMock__factory>;
    getContractFactory(
      name: "UniswapV2RouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2RouterMock__factory>;
    getContractFactory(
      name: "UniswapV3RouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3RouterMock__factory>;
    getContractFactory(
      name: "WrappedNativeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedNativeMock__factory>;
    getContractFactory(
      name: "SwapDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapDiamond__factory>;
    getContractFactory(
      name: "SwapDiamondStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapDiamondStorage__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155Supply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Supply>;
    getContractAt(
      name: "ERC1155URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155URIStorage>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "UUPSSignableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSSignableUpgradeable>;
    getContractAt(
      name: "Bundler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bundler>;
    getContractAt(
      name: "BundleExecutorImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BundleExecutorImplementation>;
    getContractAt(
      name: "BundleExecutorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BundleExecutorProxy>;
    getContractAt(
      name: "BridgeFacade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeFacade>;
    getContractAt(
      name: "FeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManager>;
    getContractAt(
      name: "ERC1155Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Handler>;
    getContractAt(
      name: "ERC20Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Handler>;
    getContractAt(
      name: "ERC721Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Handler>;
    getContractAt(
      name: "NativeHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeHandler>;
    getContractAt(
      name: "SBTHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SBTHandler>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IBundler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBundler>;
    getContractAt(
      name: "IBridgeFacade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeFacade>;
    getContractAt(
      name: "IFeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeManager>;
    getContractAt(
      name: "IERC1155Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Handler>;
    getContractAt(
      name: "IERC20Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Handler>;
    getContractAt(
      name: "IERC721Handler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Handler>;
    getContractAt(
      name: "INativeHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INativeHandler>;
    getContractAt(
      name: "ISBTHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISBTHandler>;
    getContractAt(
      name: "IERC1155MintableBurnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MintableBurnable>;
    getContractAt(
      name: "IERC20MintableBurnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MintableBurnable>;
    getContractAt(
      name: "IERC721MintableBurnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MintableBurnable>;
    getContractAt(
      name: "IWrappedNative",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedNative>;
    getContractAt(
      name: "ISBT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISBT>;
    getContractAt(
      name: "ISigners",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISigners>;
    getContractAt(
      name: "Constants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Constants>;
    getContractAt(
      name: "ERC1155MintableBurnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155MintableBurnable>;
    getContractAt(
      name: "ERC20MintableBurnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MintableBurnable>;
    getContractAt(
      name: "ERC721MintableBurnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721MintableBurnable>;
    getContractAt(
      name: "Hashes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Hashes>;
    getContractAt(
      name: "Signers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Signers>;
    getContractAt(
      name: "Diamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Diamond>;
    getContractAt(
      name: "DiamondStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondStorage>;
    getContractAt(
      name: "OwnableDiamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableDiamond>;
    getContractAt(
      name: "OwnableDiamondStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableDiamondStorage>;
    getContractAt(
      name: "IJoeRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJoeRouter01>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "IPeripheryPayments",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeripheryPayments>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "BridgeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeRouter>;
    getContractAt(
      name: "MulticallRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MulticallRouter>;
    getContractAt(
      name: "TraderJoeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TraderJoeRouter>;
    getContractAt(
      name: "TransferRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferRouter>;
    getContractAt(
      name: "UniswapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router>;
    getContractAt(
      name: "UniswapV3Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Router>;
    getContractAt(
      name: "WrapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapRouter>;
    getContractAt(
      name: "BridgeRouterStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeRouterStorage>;
    getContractAt(
      name: "TraderJoeRouterStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TraderJoeRouterStorage>;
    getContractAt(
      name: "UniswapV2RouterStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2RouterStorage>;
    getContractAt(
      name: "UniswapV3RouterStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3RouterStorage>;
    getContractAt(
      name: "WrapRouterStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapRouterStorage>;
    getContractAt(
      name: "IWrappedNative",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedNative>;
    getContractAt(
      name: "MasterRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterRouter>;
    getContractAt(
      name: "MasterRouterStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterRouterStorage>;
    getContractAt(
      name: "AbstractSwapRouterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractSwapRouterMock>;
    getContractAt(
      name: "TraderJoeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TraderJoeMock>;
    getContractAt(
      name: "UniswapV2RouterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2RouterMock>;
    getContractAt(
      name: "UniswapV3RouterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3RouterMock>;
    getContractAt(
      name: "WrappedNativeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedNativeMock>;
    getContractAt(
      name: "SwapDiamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapDiamond>;
    getContractAt(
      name: "SwapDiamondStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapDiamondStorage>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
